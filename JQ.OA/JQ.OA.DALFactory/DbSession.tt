<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>

<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\\JQ.QA.Model\\DataModel.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

using System.Linq;
using System.Text;
using JQ.QA.Dal;
using JQ.QA.IDal;

namespace JQ.OA.DALFactory
{
	/// <summary>
    /// DbSession:This is a simple factory, which is the unified entry for entire DAL
    /// </summary>
	 public partial class DBSession :IDbSession
    {  
		<#
		// Emit Entity Types

		foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
		{
			//fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");
			//BeginNamespace(namespaceName, code);    
		#>	
		private I<#=entity.Name#>Dal _<#=entity.Name#>Dal;
		public I<#=entity.Name#>Dal <#=entity.Name#>Dal {
			get {
				if (_<#=entity.Name#>Dal == null)
				{
				_<#=entity.Name#>Dal = AbstractFactory.Create<#=entity.Name#>Dal();
					//_<#=entity.Name#>Dal =new <#=entity.Name#>Dal();
				}
				return _<#=entity.Name#>Dal;
			}
		}
		<#}#>
	
	}
}