<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>

<#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\\JQ.QA.Model\\DataModel.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

using System.Linq;
using System.Text;
using JQ.QA.Dal;
using JQ.QA.IDal;

namespace JQ.OA.DALFactory
{
	
	public partial class AbstractFactory
    {

		/// <summary>
        /// Create an Userinfo instance
        /// </summary>
        /// <returns></returns>
		<#
		// Emit Entity Types

		foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
		{
			//fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");
			//BeginNamespace(namespaceName, code);    
		#>	

        public static I<#=entity.Name#>Dal Create<#=entity.Name#>Dal()
        {
            string fullClassName = NameSpace + ".<#=entity.Name#>Dal"; //Construct a full name of a class, include namespace
            return CreateInstance(fullClassName) as I<#=entity.Name#>Dal;

        }
	


		<#}#>
	
	}
}